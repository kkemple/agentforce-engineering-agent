public class GeneralProgrammingKnowledgeAction {
    @InvocableMethod(
        label='Answer Programming Questions'
        description='Answers questions to programming questions including providing code instruction.'
        category='AI/ML'
    )
    public static List<GenerateResponseResult> generateResponse(List<GenerateResponseRequest> requests) {
        List<GenerateResponseResult> results = new List<GenerateResponseResult>();

        for(GenerateResponseRequest request : requests) {
            GenerateResponseResult result = new GenerateResponseResult();

            try {
                // Create generate chat request
                aiplatform.ModelsAPI.createChatGenerations_Request apiRequest =
                    new aiplatform.ModelsAPI.createChatGenerations_Request();

                // Specify model
                apiRequest.modelName = 'Code_Instruction_LLM_CM_12l_wck415e9c4f';

                // Create request body
                aiplatform.ModelsAPI_ChatGenerationsRequest body =
                    new aiplatform.ModelsAPI_ChatGenerationsRequest();
                apiRequest.body = body;

                // Add chat messages to body
                List<aiplatform.ModelsAPI_ChatMessageRequest> messagesList =
                    new List<aiplatform.ModelsAPI_ChatMessageRequest>();

                // Add user message
                aiplatform.ModelsAPI_ChatMessageRequest programmingQuestion =
                    new aiplatform.ModelsAPI_ChatMessageRequest();
                    programmingQuestion.content = request.programmingQuestion;
                    programmingQuestion.role = 'user';
                messagesList.add(programmingQuestion);

                body.messages = messagesList;

                // Make request
                aiplatform.ModelsAPI modelsAPI = new aiplatform.ModelsAPI();
                aiplatform.ModelsAPI.createChatGenerations_Response response =
                    modelsAPI.createChatGenerations(apiRequest);

                // Extract generated response from response
                if (response.Code200?.generationDetails?.generations != null &&
                    !response.Code200.generationDetails.generations.isEmpty()) {
                    result.generatedResponse = response.Code200.generationDetails.generations[0].content;
                    result.isSuccess = true;
                } else {
                    result.isSuccess = false;
                    result.errorMessage = 'No generated response in response';
                }

            } catch(aiplatform.ModelsAPI.createChatGenerations_ResponseException e) {
                result.isSuccess = false;
                result.errorMessage = 'Error: ' + e.getMessage() +
                    ' (Response Code: ' + e.responseCode + ')';
            } catch(Exception e) {
                result.isSuccess = false;
                result.errorMessage = 'Unexpected error: ' + e.getMessage();
            }

            results.add(result);
        }

        return results;
    }

    public class GenerateResponseRequest {
        @InvocableVariable(
            label='Programming Question'
            description='The programming question to send to the code instruction model'
            required=true
        )
        public String programmingQuestion;
    }

    public class GenerateResponseResult {
        @InvocableVariable(
            label='Generated Response'
            description='The response generated by the code instruction model'
        )
        public String generatedResponse;

        @InvocableVariable(
            label='Success'
            description='Indicates if the response generation was successful'
        )
        public Boolean isSuccess;

        @InvocableVariable(
            label='Error Message'
            description='Error message if the generation failed'
        )
        public String errorMessage;
    }
}
